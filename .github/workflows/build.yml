name: Build
on:
  push:
    branches: [main]

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            target: desktop

    runs-on: ${{ matrix.os }}

    steps:
      - name: Create Nix mount point
        run: sudo mkdir /nix

      - name: Maximize build space
        uses: easimon/maximize-build-space@master
        with:
          root-reserve-mb: 512
          swap-size-mb: 1024
          remove-dotnet: true
          remove-android: true
          remove-haskell: true
          build-mount-path: "/nix"
          overprovision-lvm: true

      - name: Build
        run: |
          echo "Free space:"
          df -h

      - name: Checkout
        uses: actions/checkout@v3

      - name: Install Nix
        uses: cachix/install-nix-action@v17
        with:
          extra_nix_config: |
            experimental-features = nix-command flakes
            access-tokens = github.com=${{ secrets.GITHUB_TOKEN }}

      - uses: cachix/cachix-action@v10
        with:
          name: oberblastmeister-dotfiles
          authToken: '${{ secrets.CACHIX_AUTH_TOKEN }}'
          # add binary cache through cachix name
          extraPullNames: nix-community 

      - name: Build target
        run: |
          set -o pipefail
          nix build .#nixosConfigurations.${{ matrix.target }}.config.system.build.toplevel --fallback --show-trace -v --log-format raw > >(tee /tmp/nix-build-out.log) 2> >(tee /tmp/nix-build-err.log >&2)

      - name: Output build failure
        if: failure()
        run: |
          drv=$(grep "For full logs, run" /tmp/nix-build-err.log | grep -oE "/nix/store/.*.drv")
          nix log $drv
          echo $drv
          exit 1
