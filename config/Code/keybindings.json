[
    // used to test keybindings
    // {
    //     "key": "adsfadf",
    //     "command": "editor.debug.action.toggleInlineBreakpoint",
    // },
    // make agda mode work
    {
        "key": "ctrl+c",
        "when": "agdaMode",
        "command": "-vscode-neovim.send",
    },
    {
        "key": "ctrl+x",
        "command": "-editor.action.clipboardCutAction",
        "when": "agdaMode"
    },
    {
        "key": "ctrl+x",
        "command": "-vscode-neovim.send",
        "when": "editorTextFocus && neovim.ctrlKeysNormal && neovim.init && neovim.mode != 'insert'"
    },
    {
        "key": "ctrl+y",
        "command": "-vscode-neovim.ctrl-y",
        "when": "editorTextFocus && neovim.ctrlKeysNormal && neovim.init && neovim.mode != 'insert'"
    },
    {
        "key": "ctrl+y",
        "command": "-redo"
    },
    // {
    //     "key": "ctrl+x",
    //     "command": "-editor.action.clipboardCutAction",
    // },
    // {
    //     "key": "ctrl+x",
    //     "command": "-vscode-neovim.send"
    // },

    // space mappings
    {
        "key": "space",
        "command": "whichkey.show",
        "when": "neovim.mode != 'insert' && editorTextFocus"
        // "when": "neovim.mode == normal",
    },
    {
        "key": "space",
        "command": "whichkey.triggerKey",
        "args": "space",
        "when": "whichkeyVisible"
    },
    // other vscode mappings
    {
        "key": "shift+ctrl+e",
        "command": "actions.findWithSelection"
    },
    {
        "key": "ctrl+e",
        "command": "-actions.findWithSelection"
    },
    {
        "key": "ctrl+e",
        "command": "workbench.view.explorer",
        "when": "neovim.mode == normal"
    },
    {
        "key": "shift+ctrl+e",
        "command": "-workbench.view.explorer",
        "when": "neovim.mode == normal"
    },
    {
        "key": "ctrl+l",
        "when": "sideBarFocus",
        "command": "workbench.action.focusActiveEditorGroup"
    },
    {
        "key": "ctrl+h",
        "command": "workbench.action.focusActiveEditorGroup",
        "when": "terminalFocus"
    },
    {
        "key": "ctrl+j",
        "command": "-editor.action.insertLineAfter",
        "when": "editorTextFocus && neovim.ctrlKeysInsert && !neovim.recording && neovim.mode == 'insert'"
    },
    {
        "key": "alt+j",
        "command": "workbench.action.terminal.focus",
        "when": "!terminalFocus"
    },
    {
        "key": "ctrl+j",
        "command": "-workbench.action.togglePanel"
    },
    {
        "key": "ctrl+k ctrl+i",
        "command": "-editor.action.showHover",
        "when": "editorTextFocus"
    },
    {
        "key": "ctrl+shift+l",
        "command": "workbench.action.increaseViewSize"
    },
    {
        "key": "ctrl+shift+h",
        "command": "workbench.action.decreaseViewSize"
    },
    {
        "key": "ctrl+n",
        "command": "-workbench.action.files.newUntitledFile"
    },
    {
        "key": "ctrl+t",
        "command": "-vscode-neovim.send",
        "when": "neovim.mode == cmdline_insert || neovim.mode == cmdline_normal || neovim.mode == cmdline_replace"
        
    },
    {
        "key": "ctrl+t",
        "command": "-vscode-neovim.send",
        "when": "editorTextFocus && neovim.ctrlKeysInsert && neovim.recording && neovim.mode == insert"
    },
    {
        "key": "ctrl+t",
        "command": "workbench.action.terminal.toggleTerminal",
        "when": "terminal.active"
    },
    // escape stuff
    // use this to close diagnostic popups
    {
        "key": "ctrl+[",
        "command": "closeMarkersNavigation",
        "when": "editorFocus && markersNavigationVisible && neovim.mode == normal"
    },
    {
        "key": "ctrl+[",
        "command": "cancelRenameInput",
        "when": "editorFocus && renameInputVisible"
    },
    {
        "key": "ctrl+[",
        "command": "gitlens.key.escape",
        "when": "editorTextFocus && gitlens:key:escape && !findWidgetVisible && !isInEmbeddedEditor && !renameInputVisible && !suggestWidgetVisible"
    },
    {
        "key": "ctrl+[",
        "command": "filesExplorer.cancelCut",
        "when": "explorerResourceCut && explorerViewletVisible && filesExplorerFocus && !inputFocus"
    },
    // Close reference to escape
    {
        "key": "ctrl+[",
        "command": "closeReferenceSearch",
        "when": "inReferenceSearchEditor && !config.editor.stablePeek"
    },
    {
        "key": "ctrl+[",
        "command": "closeReferenceSearch",
        "when": "referenceSearchVisible && !config.editor.stablePeek"
    },
    {
        "key": "ctrl+[",
        "command": "closeReferenceSearch",
        "when": "inReferenceSearchEditor && !config.editor.stablePeek && neovim.mode == 'normal'"
    },
    {
        "key": "ctrl+[",
        "command": "notifications.hideList",
        "when": "notificationCenterVisible"
    },
    {
        "key": "ctrl+[",
        "command": "workbench.action.closeQuickOpen",
        "when": "inQuickOpen"
    },
    {
        "key": "ctrl+[",
        "command": "closeFindWidget",
        "when": "editorFocus && findWidgetVisible && !isComposing"
    },
    // cursor stuff
    {
        "key": "ctrl+b",
        "command": "cursorLeft",
        "when": "textInputFocus && neovim.mode == insert"
    },
    {
        "key": "ctrl+f",
        "command": "cursorRight",
        "when": "textInputFocus && neovim.mode == insert"
    },
    {
        "key": "ctrl+e",
        "command": "cursorEnd",
        "when": "textInputFocus && neovim.mode == insert"
    },
    {
        "key": "ctrl+a",
        "command": "cursorHome",
        "when": "textInputFocus && neovim.mode == insert"
    },
    // magit stuff
    {
        "command": "magit.toggle-fold",
        "key": "tab",
        "when": "editorTextFocus && editorLangId == 'magit'"
    },
    {
        "key": "x",
        "command": "magit.discard-at-point",
        "when": "editorTextFocus && editorLangId == 'magit'"
    },
    {
        "key": "k",
        "command": "-magit.discard-at-point"
    },
    {
        "key": "g",
        "command": "-magit.refresh",
    },
    {
        "key": "ctrl+r",
        "command": "magit.refresh",
        "when": "editorTextFocus && editorLangId == 'magit"
    },
    {
        "key": "-",
        "command": "magit.reverse-at-point",
        "when": "editorTextFocus && editorLangId == 'magit'"
    },
    {
        "key": "v",
        "command": "-magit.reverse-at-point"
    },
    {
        "key": "shift+-",
        "command": "magit.reverting",
        "when": "editorTextFocus && editorLangId == 'magit'"
    },
    {
        "key": "shift+v",
        "command": "-magit.reverting"
    },
    {
        "key": "shift+o",
        "command": "magit.resetting",
        "when": "editorTextFocus && editorLangId == 'magit'"
    },
    {
        "key": "shift+x",
        "command": "-magit.resetting"
    },
    {
        "key": "x",
        "command": "-magit.reset-mixed"
    },
    {
        "key": "ctrl+u x",
        "command": "-magit.reset-hard"
    },
    {
        "key": "shift+f",
        "command": "-magit.pulling",
    },
    {
        "key": "p",
        "command": "magit.pulling",
        "when": "editorTextFocus && editorLangId == 'magit'"
    },
    {
        "key": "alt+j",
        "command": "workbench.action.terminal.focusNext",
        "when": "terminalFocus && terminalProcessSupported && !terminalEditorFocus"
    },
    {
        "key": "ctrl+pagedown",
        "command": "-workbench.action.terminal.focusNext",
        "when": "terminalFocus && terminalProcessSupported && !terminalEditorFocus"
    },
    {
        "key": "alt+k",
        "command": "workbench.action.terminal.focusPrevious",
        "when": "terminalFocus && terminalProcessSupported && !terminalEditorFocus"
    },
    {
        "key": "ctrl+pageup",
        "command": "-workbench.action.terminal.focusPrevious",
        "when": "terminalFocus && terminalProcessSupported && !terminalEditorFocus"
    },
    // merge conflicts
    {
        "key": "d g",
        "command": "merge-conflict.accept.incoming",
        "when": "neovim.mode == normal && editorTextFocus && mergeConflictsCount && mergeConflictsCount != 0",
    },
    {
        "key": "d p",
        "command": "merge-conflict.accept.current",
        "when": "neovim.mode == normal && editorTextFocus && mergeConflictsCount && mergeConflictsCount != 0",
    },
    {
        "key": "d b",
        "command": "merge-conflict.accept.both",
        "when": "neovim.mode == normal && editorTextFocus && mergeConflictsCount && mergeConflictsCount != 0",
    },
    {
        "key": "d D",
        "command": "merge-conflict.compare",
        "when": "neovim.mode == normal && editorTextFocus && mergeConflictsCount && mergeConflictsCount != 0",
    },
    {
        "key": "ctrl+.",
        "command": "-editor.action.quickFix",
        "when": "editorHasCodeActionsProvider && editorTextFocus && !editorReadonly"
    },
    {
        "key": "ctrl+.",
        "command": "-problems.action.showQuickFixes",
        "when": "problemFocus"
    },
]
