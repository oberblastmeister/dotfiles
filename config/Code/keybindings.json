[
    // space mappings
    {
        "key": "space",
        "command": "whichkey.show",
        "when": "neovim.mode != insert && textInputFocus"
    },
    // {
    //     "key": "space w",
    //     "command": "workbench.action.files.save",
    //     "when": "neovim.mode == normal",
    // },
    // {
    //     "key": "space q",
    //     "command": "workbench.action.closeActiveEditor",
    //     "when": "neovim.mode == normal",
    // },
    // {
    //     "key": "space q",
    //     "command": "workbench.action.closeAllEditors",
    //     "when": "neovim.mode == normal"
    // },
    // {
    //     "key": "space o",
    //     "command": "vscode-neovim.send",
    //     "args": ":Only<CR>",
    //     "when": "neovim.mode == normal",
    // },
    // {
    //     "key": "space =",
    //     "command": "editor.action.formatDocument",
    //     "when": "neovim.mode == normal",
    // },
    // {
    //     "key": "space r n",
    //     "command": "editor.action.rename",
    //     "when": "neovim.mode == normal",
    // },
    // {
    //     "key": "space a",
    //     "command": "keyboard-quickfix.openQuickFix",
    //     "when": "neovim.mode == normal",
    // },
    // {
    //     "key": "space l",
    //     "command": "codelens.showLensesInCurrentLine",
    //     "when": "neovim.mode == normal",
    // },
    // {
    //     "key": "space space",
    //     "command": "editor.action.openLink",
    //     "when": "neovim.mode == normal",
    // },
    // {
    //     "key": "space h r",
    //     "command": "git.revertSelectedRanges",
    //     "when": "neovim.mode == normal",
    // },
    // {
    //     "key": "space h s",
    //     "command": "git.stageSelectedRanges",
    //     "when": "neovim.mode == normal",
    // },
    // {
    //     "key": "space b",
    //     "command": "workbench.action.toggleSidebarVisibility",
    //     "when": "neovim.mode == normal",
    // },
    // {
    //     "key": "space /",
    //     "command": "workbench.action.replaceInFiles",
    //     "when": "neovim.mode == normal",
    // },
    // {
    //     "key": "ctrl+/",
    //     "command": "editor.action.startFindReplaceAction",
    //     "when": "neovim.mode == normal",
    // },
    // {
    //     "key": "[ g",
    //     "command": "editor.action.marker.prev",
    //     "when": "neovim.mode == normal",
    // },
    // {
    //     "key": "] g",
    //     "command": "editor.action.marker.next",
    //     "when": "neovim.mode == normal",
    // },
    // {
    //     "key": "[ G",
    //     "command": "editor.action.marker.prevInFiles",
    //     "when": "neovim.mode == normal",
    // },
    // {
    //     "key": "] G",
    //     "command": "editor.action.marker.nextInFiles",
    //     "when": "neovim.mode == normal",
    // },
    // {
    //   "key": "ctrl+shift+[",
    //   "command": "editor.fold",
    //   "when": "editorTextFocus && foldingEnabled"
    // },
    // other vscode mappings
    {
        "key": "shift+ctrl+e",
        "command": "actions.findWithSelection"
    },
    {
        "key": "ctrl+e",
        "command": "-actions.findWithSelection"
    },
    {
        "key": "ctrl+e",
        "command": "workbench.view.explorer",
        "when": "neovim.mode == normal"
    },
    {
        "key": "shift+ctrl+e",
        "command": "-workbench.view.explorer",
        "when": "neovim.mode == normal"
    },
    {
        "key": "ctrl+l",
        "when": "sideBarFocus",
        "command": "workbench.action.focusActiveEditorGroup"
    },
    {
        "key": "ctrl+k",
        "command": "workbench.action.focusActiveEditorGroup",
        "when": "terminalFocus"
    },
    {
        "key": "ctrl+j",
        "command": "-editor.action.insertLineAfter",
        "when": "editorTextFocus && neovim.ctrlKeysInsert && !neovim.recording && neovim.mode == 'insert'"
    },
    {
        "key": "alt+j",
        "command": "workbench.action.terminal.focus",
        "when": "!terminalFocus"
    },
    {
        "key": "ctrl+j",
        "command": "-workbench.action.togglePanel"
    },
    {
        "key": "ctrl+k ctrl+i",
        "command": "-editor.action.showHover",
        "when": "editorTextFocus"
    },
    {
        "key": "ctrl+shift+l",
        "command": "workbench.action.increaseViewSize"
    },
    {
        "key": "ctrl+shift+h",
        "command": "workbench.action.decreaseViewSize"
    },
    {
        "key": "ctrl+t",
        "command": "-vscode-neovim.send",
        "when": "neovim.mode == 'cmdline_insert' || neovim.mode == 'cmdline_normal' || neovim.mode == 'cmdline_replace'"
    },
    {
        "key": "ctrl+t",
        "command": "-vscode-neovim.send",
        "when": "editorTextFocus && neovim.ctrlKeysInsert && neovim.recording && neovim.mode == 'insert'"
    },
    {
        "key": "ctrl+n",
        "command": "-workbench.action.files.newUntitledFile"
    },
    {
        "key": "ctrl+t",
        "command": "workbench.action.terminal.toggleTerminal",
        "when": "terminal.active"
    },
    {
        "key": "ctrl+`",
        "command": "-workbench.action.terminal.toggleTerminal",
        "when": "terminal.active"
    },
    // escape stuff
    {
        "key": "ctrl+[",
        "command": "closeMarkersNavigation",
        "when": "editorFocus && markersNavigationVisible"
    },
    {
        "key": "ctrl+[",
        "command": "cancelRenameInput",
        "when": "editorFocus && renameInputVisible"
    },
    {
        "key": "ctrl+[",
        "command": "gitlens.key.escape",
        "when": "editorTextFocus && gitlens:key:escape && !findWidgetVisible && !isInEmbeddedEditor && !renameInputVisible && !suggestWidgetVisible"
    },
    {
        "key": "ctrl+[",
        "command": "filesExplorer.cancelCut",
        "when": "explorerResourceCut && explorerViewletVisible && filesExplorerFocus && !inputFocus"
    },
    // Close reference to escape
    {
        "key": "ctrl+[",
        "command": "closeReferenceSearch",
        "when": "inReferenceSearchEditor && !config.editor.stablePeek"
    },
    {
        "key": "ctrl+[",
        "command": "closeReferenceSearch",
        "when": "referenceSearchVisible && !config.editor.stablePeek"
    },
    {
        "key": "ctrl+[",
        "command": "closeReferenceSearch",
        "when": "inReferenceSearchEditor && !config.editor.stablePeek && neovim.mode == 'normal'"
    },
    {
        "key": "ctrl+[",
        "command": "notifications.hideList",
        "when": "notificationCenterVisible"
    },
    {
        "key": "ctrl+[",
        "command": "workbench.action.closeQuickOpen",
        "when": "inQuickOpen"
    },
    {
        "key": "ctrl+[",
        "command": "closeFindWidget",
        "when": "editorFocus && findWidgetVisible && !isComposing"
    },
    // cursor stuff
    {
        "key": "ctrl+b",
        "command": "cursorLeft",
        "when": "textInputFocus && neovim.mode == insert"
    },
    {
        "key": "ctrl+f",
        "command": "cursorRight",
        "when": "textInputFocus && neovim.mode == insert"
    },
    {
        "key": "ctrl+e",
        "command": "cursorEnd",
        "when": "textInputFocus && neovim.mode == insert"
    },
    {
        "key": "ctrl+a",
        "command": "cursorHome",
        "when": "textInputFocus && neovim.mode == insert"
    },
    // magit stuff
    {
        "command": "magit.toggle-fold",
        "key": "tab",
        "when": "editorTextFocus && editorLangId == 'magit'"
    },
    {
        "key": "x",
        "command": "magit.discard-at-point",
        "when": "editorTextFocus && editorLangId == 'magit'"
    },
    {
        "key": "k",
        "command": "-magit.discard-at-point"
    },
    {
        "key": "-",
        "command": "magit.reverse-at-point",
        "when": "editorTextFocus && editorLangId == 'magit'"
    },
    {
        "key": "v",
        "command": "-magit.reverse-at-point"
    },
    {
        "key": "shift+-",
        "command": "magit.reverting",
        "when": "editorTextFocus && editorLangId == 'magit'"
    },
    {
        "key": "shift+v",
        "command": "-magit.reverting"
    },
    {
        "key": "shift+o",
        "command": "magit.resetting",
        "when": "editorTextFocus && editorLangId == 'magit'"
    },
    {
        "key": "shift+x",
        "command": "-magit.resetting"
    },
    {
        "key": "x",
        "command": "-magit.reset-mixed"
    },
    {
        "key": "ctrl+u x",
        "command": "-magit.reset-hard"
    },
    {
        "key": "shift+f",
        "command": "-magit.pulling",
    },
    {
        "key": "p",
        "command": "magit.pulling",
        "when": "editorTextFocus && editorLangId == 'magit'"
    }
]