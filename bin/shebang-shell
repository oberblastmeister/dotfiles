#! /usr/bin/env cached-nix-shell
#! nix-shell -i python3 -p python310
# vim: ft=python

import argparse
import os
import re
from pathlib import Path
import subprocess
import shlex

shebang_pat = re.compile(r"#!\s*(.*)")
packages_pat = re.compile(r"-p\s+(.+?)(?:\s+-)?")


def parse_shebang(args: list[str]) -> list[str]:
    packages = []
    args_iter = iter(args)
    while True:
        arg = next(args_iter, None)
        if arg is None:
            return packages
        elif arg == "-p" or arg == "--packages":
            while True:
                arg = next(args_iter, None)
                if arg == None:
                    return packages
                elif arg.startswith("-"):
                    break
                packages.append(arg)


def parse_file(path: str) -> list[str]:
    packages = []
    with open(path) as file:
        for line in file:
            line = line.rstrip()
            m = shebang_pat.match(line)
            if m is None:
                return packages
            command = shlex.split(m.group(1))
            if command[0] != "nix-shell":
                continue
            packages.extend(parse_shebang(command[1:]))
    return packages


def get_args() -> argparse.Namespace:
    parser = argparse.ArgumentParser()
    parser.description = "Open a nix-shell with the packages from a shebang"
    parser.add_argument("path", help="Path to a file with a nix-shell shebang", type=Path)
    parser.add_argument("--legacy", help="Use the legacy nix-shell", action="store_true")
    parser.add_argument("--shell", help="Shell to use", default="fish")
    parser.add_argument("nix_shell_args", nargs="*", help="Optional arguments to pass to nix-shell", type=list[str])
    return parser.parse_args()
    
def main():
    args = get_args()
    packages = parse_file(args.path)
    if not packages:
        raise Exception("No packages found")

    command = None
    if args.legacy:
        command = ["nix-shell", "-p"] + packages + args.nix_shell_args
    else:
        command = ["nix", "shell"] + ["nixpkgs#" + p for p in packages] + args.nix_shell_args

    env = os.environ.copy()
    env['SHELL'] = args.shell
    print(shlex.join(command))
    subprocess.run(command, env=env)


if __name__ == "__main__":
    main()
